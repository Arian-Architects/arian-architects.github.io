---
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import BaseHead from '@/components/BaseHead.astro'
import { SITE_DESCRIPTION, SITE_TITLE } from '../seo'

const {
  content: { title = SITE_TITLE, description = SITE_DESCRIPTION },
} = Astro.props
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style is:global>
      .row {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
      }
      .column {
        flex: 33%;
        max-width: 25%;
        padding: 0 8px;
      }
      .column img {
        width: 100%;
        margin-top: 8px;
        vertical-align: middle;
      }
      @media screen and (max-width: 800px) {
        .column {
          flex: 50%;
          max-width: 50%;
        }
      }
      @media screen and (max-width: 600px) {
        .column {
          flex: 100%;
          max-width: 100%;
        }
      }
    </style>
  </head>
  <body class="font-display flex flex-col">
    <Header />
    <slot />
    <Footer />
    <script is:inline>
      if ('serviceWorker' in navigator) {
        fetch('/version.json')
          .then((res) => res.json())
          .then((res) => {
            if (res && res.version) {
              localStorage.setItem('received-sw-version', res.version)
              navigator.serviceWorker.register('/service-worker.js').then(
                (registration) => {
                  const swVersion = localStorage.getItem('sw-version')
                  if (swVersion) {
                    if (swVersion !== res.version) {
                      self.caches.delete('prefetch').then(() => {
                        registration.update().then(() => {
                          // Update the version if updated locally
                          localStorage.setItem('sw-version', res.version)
                        })
                      })
                    }
                  } else {
                    localStorage.setItem('sw-version', res.version)
                  }
                },
                (error) => {
                  console.error(`Service worker registration failed: ${error}`)
                },
              )
            }
          })
      } else {
        console.error('Service workers are not supported.')
      }
      window.addEventListener('load', (event) => {
        const attrs = ['href', 'src', 'srcset', 'data-src']
        attrs.forEach((j) => {
          document.querySelectorAll(`[${j}^="/"]`).forEach((i) => {
            let sc = document.createElement('link')
            sc.setAttribute('rel', 'prefetch')
            sc.setAttribute('href', i.getAttribute(j))
            document.head.appendChild(sc)
          })
        })
      })
    </script>
  </body>
</html>
